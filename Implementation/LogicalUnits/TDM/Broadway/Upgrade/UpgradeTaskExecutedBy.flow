tags: Upgrade
stages:
  Get Globals:
    actors:
      TDMDB_SCHEMA:
        parent: FabricSetRead
        in:
          key:
            const: TDMDB_SCHEMA
            default: false
      TDM_PARAMETERS_SEPARATOR:
        parent: FabricSetRead
        in:
          key:
            const: TDM_PARAMETERS_SEPARATOR
  Get All tasks executions:
    actors:
      Select from task_execution_list:
        parent: DbCommand
        in:
          interface:
            const: TDM
          sql:
            const: select * from ${@schema}.task_execution_list
          schema:
            link: TDMDB_SCHEMA/result
            schema: string
            mandatory: false
        out:
          result:
            schema: '#ref'
  Get Task Executed by:
    actors:
      TASK_EXECUTED_BY:
        parent: Const
        in:
          value:
            const: null
            link:
              path: Select from task_execution_list/result/task_executed_by
              iterate: Iterate
        out:
          value:
            schema: string
  Replace With New Format:
    actors:
      JavaScript:
        parent: JavaScript
        in:
          script:
            const:
              userCode: |
                function transformInput(input) {
                    // Split the input into two parts before and after '##'
                    const [emailPart, rolesPart] = input.split('##');

                    // Remove square brackets [] from rolesPart and split it by space and comma
                    const cleanedRoles = rolesPart
                        .replace(/[\[\]]/g, '') // Remove square brackets
                        .split(', ')      // Split by space and comma

                        // Filter out empty strings (if any)
                        .filter(item => item);

                    // Join the roles with the desired delimiter <#>
                    const joinedRoles = cleanedRoles.join(task_delimiter);

                    // Combine the email part and transformed roles with ##
                    return `${emailPart}##${joinedRoles}`;
                }

                // Example usage
                const input = task_executed_by;
                const delimiter = task_delimiter
                const result = transformInput(input);
                result;

                // Output: "sivan.mulla@k2view.com##k2view_k2v_user<#>cn=APP-ADSS_POV-25-a208062-k2view-tdm-admin<#>dv=ssoauthgrps<#>o=sso<#>jojo"
              script: |-
                function transformInput(input) {
                  // Split the input into two parts before and after '##'
                  var _input$split = input.split('##'),
                      emailPart = _input$split[0],
                      rolesPart = _input$split[1]; // Remove square brackets [] from rolesPart and split it by space and comma


                  var cleanedRoles = rolesPart.replace(/[\[\]]/g, '') // Remove square brackets
                  .split(', ') // Split by space and comma
                  // Filter out empty strings (if any)
                  .filter(function (item) {
                    return item;
                  }); // Join the roles with the desired delimiter <#>

                  var joinedRoles = cleanedRoles.join(task_delimiter); // Combine the email part and transformed roles with ##

                  return emailPart + "##" + joinedRoles;
                } // Example usage


                var input = task_executed_by;
                var delimiter = task_delimiter;
                var result = transformInput(input);
                result; // Output: "sivan.mulla@k2view.com##k2view_k2v_user<#>cn=APP-ADSS_POV-25-a208062-k2view-tdm-admin<#>dv=ssoauthgrps<#>o=sso<#>jojo"
          task_delimiter:
            link: TDM_PARAMETERS_SEPARATOR/result
            schema: string
            mandatory: false
          task_executed_by:
            link: TASK_EXECUTED_BY/value
            schema: string
            mandatory: false
        out:
          result:
            schema: string
  Update All tasks executions:
    last: 1
    actors:
      Update task_execution_list:
        parent: DbCommand
        in:
          interface:
            const: TDM
          sql:
            const: |-
              update ${@schema}.task_execution_list
              set task_executed_by = ${new_format}
              where task_id=${task_id} and task_execution_id=${task_execution_id} and task_executed_by = ${old_format} and task_type=${task_type}
          task_id:
            link:
              path: Select from task_execution_list/result/task_id
              iterate: Iterate
            schema: integer
            mandatory: false
          task_execution_id:
            link:
              path: Select from task_execution_list/result/task_execution_id
              iterate: Iterate
            schema: integer
            mandatory: false
          old_format:
            link: TASK_EXECUTED_BY/value
            schema: string
            mandatory: false
          new_format:
            link: JavaScript/result
            schema: string
            mandatory: false
          task_type:
            link:
              path: Select from task_execution_list/result/task_type
              iterate: Iterate
            schema: string
            mandatory: false
          schema:
            link: TDMDB_SCHEMA/result
            schema: string
            mandatory: false
  Stage 6: {
    }
schemas:
  Select from task_execution_list.out.result:
    type: array
    items:
      type: object
      properties:
        task_id:
          type: integer
        task_type:
          type: string
        task_execution_id:
          type: integer
        creation_date:
          type: date
        be_id:
          type: integer
        environment_id:
          type: integer
        product_id:
          type: integer
        product_version:
          type: string
        execution_status:
          type: string
        start_execution_time:
          type: date
        end_execution_time:
          type: date
        num_of_processed_entities:
          type: integer
        num_of_copied_entities:
          type: integer
        num_of_failed_entities:
          type: integer
        data_center_name:
          type: string
        lu_id:
          type: integer
        num_of_processed_ref_tables:
          type: integer
        num_of_copied_ref_tables:
          type: integer
        num_of_failed_ref_tables:
          type: integer
        parent_lu_id:
          type: integer
        source_env_name:
          type: string
        source_environment_id:
          type: integer
        task_executed_by:
          type: string
        fabric_execution_id:
          type: string
        subset_task_execution_id:
          type: integer
        version_task_execution_id:
          type: integer
        expiration_date:
          type: date
        synced_to_fabric:
          type: boolean
        updated_by:
          type: string
        clean_redis:
          type: boolean
        process_id:
          type: integer
        execution_note:
          type: string
        source_product_version:
          type: string
        entity_inclusion_query:
          type: string
